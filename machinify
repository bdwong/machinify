#!/bin/bash -ex
# machinify - create a docker-machine configuration for a machine
#             running RancherOS that you have ssh access to.

function show_help() {
    cat <<-EOF
machinify user@host [ssh/scp options]

Create a docker-machine configuration for a machine running RancherOS
that you have ssh access to.

Options:
-s - regenerate Server certificate
     Warning: other clients will need to download the new server
     certificate to connect.

-R - regenerate Root certificate.
     Warning: all dependent applications and clients will need new
     certificates generated from the new root key.

ssh/scp options will usually be -i for the identity file. Setting up
an ssh-agent or similar is recommended.
EOF
}


if [[ "${OS}" == "Windows_NT" ]]; then
    PATH_DELIM='\'
else
    PATH_DELIM='/'
fi

function join_path() {
    local joined="$1"
    shift
    for segment; do
        joined="${joined}${PATH_DELIM}${segment}"
    done
    echo "$joined"
}

while getopts "sR" opt; do
    case $opt in
        s)  OPT_REGEN_SERVER_CERT=1
            ;;
        R)
            OPT_REGEN_CA_CERT=1
            ;;
        *)
            show_help
            exit 1;
            ;;
    esac
done

if [[ "$1" == "" ]]; then
    show_help
    exit 1
fi

ssh="ssh";
scp="scp";
ssh_target=$1
shift
ssh_opts="$*"

STORE_PATH=$(join_path ${USERPROFILE:-$HOME} .docker machine)
IS_MASTER=false
IS_SWARM=false

# Ensure dependencies if not on the default console.
${ssh} ${ssh_target} "which jq 2&>1 >/dev/null || sudo apt update && sudo apt install -y jq"


# Fetch appropriate environment variables from the docker machine.
output=`${ssh} ${ssh_opts} ${ssh_target} '
    echo MACHINE_NAME=\$(hostname);
    if which ifconfig>/dev/null; then
        echo IP_ADDR=\$(ifconfig eth0 | grep -o "inet addr:\\S*" | cut -d: -f2)
    else
        echo IP_ADDR=\$(ip address show eth0 |grep -o "inet [^/]*"| cut -d" " -f2)
    fi
    echo SSH_USER=\$USER;
'`

if [[ $? -eq 0 ]]; then
    eval ${output}
fi

# Get machine file if it exists.
machine_path=$(join_path ${STORE_PATH} machines ${MACHINE_NAME})

if [[ -f $(join_path ${machine_path} config.json) ]]; then
    echo Update config from existing machine: ${MACHINE_NAME}
    machine_template_json=$(cat $(join_path ${machine_path} config.json))
else
    # Otherwise use a standard hyper-v machine template.
    echo Create new config for machine: ${MACHINE_NAME}
    mkdir -p ${machine_path}
    machine_template_json=$(cat <<-EOF | sed -e 's%\\%\\\\%g'
    {
        "ConfigVersion": 3,
        "Driver": {
            "IPAddress": "${IP_ADDR}",
            "MachineName": "${MACHINE_NAME}",
            "SSHUser": "$SSH_USER",
            "SSHPort": 22,
            "SSHKeyPath": "${STORE_PATH}\\machines\\${MACHINE_NAME}\\id_rsa",
            "StorePath": "${STORE_PATH}",
            "SwarmMaster": ${IS_MASTER},
            "SwarmHost": "tcp://0.0.0.0:3376",
            "SwarmDiscovery": "",
            "URL": "tcp://${IP_ADDR}:2376"
        },
        "DriverName": "none",
        "HostOptions": {
            "Driver": "",
            "Memory": 0,
            "Disk": 0,
            "EngineOptions": {
                "ArbitraryFlags": [],
                "Dns": null,
                "GraphDir": "",
                "Env": [],
                "Ipv6": false,
                "InsecureRegistry": [],
                "Labels": [],
                "LogLevel": "",
                "StorageDriver": "",
                "SelinuxEnabled": false,
                "TlsVerify": true,
                "RegistryMirror": [],
                "InstallURL": "https://get.docker.com"
            },
            "SwarmOptions": {
                "IsSwarm": ${IS_SWARM},
                "Address": "",
                "Discovery": "",
                "Agent": false,
                "Master": ${IS_MASTER},
                "Host": "tcp://0.0.0.0:3376",
                "Image": "swarm:latest",
                "Strategy": "spread",
                "Heartbeat": 0,
                "Overcommit": 0,
                "ArbitraryFlags": [],
                "ArbitraryJoinFlags": [],
                "Env": null,
                "IsExperimental": false
            },
            "AuthOptions": {
                "CertDir": "${STORE_PATH}\\certs",
                "CaCertPath": "${STORE_PATH}\\certs\\ca.pem",
                "CaPrivateKeyPath": "${STORE_PATH}\\certs\\ca-key.pem",
                "CaCertRemotePath": "",
                "ServerCertPath": "${STORE_PATH}\\machines\\${MACHINE_NAME}\\server.pem",
                "ServerKeyPath": "${STORE_PATH}\\machines\\${MACHINE_NAME}\\server-key.pem",
                "ClientKeyPath": "${STORE_PATH}\\certs\\key.pem",
                "ServerCertRemotePath": "",
                "ServerKeyRemotePath": "",
                "ClientCertPath": "${STORE_PATH}\\certs\\cert.pem",
                "ServerCertSANs": [],
                "StorePath": "${STORE_PATH}\\machines\\${MACHINE_NAME}"
            }
        },
        "Name": "${MACHINE_NAME}"
    }
EOF
    );
fi

# Now let's do some serious stuff.
client="${USERNAME:-$USER}@${USERDOMAIN:-$HOSTNAME}"

# Generate new ca certificates only if requested
if [[ -n "${OPT_REGEN_CA_CERT}" ]]; then
    # Not implemented.
    # sudo ros tls gen ???
    false;
fi

# Generate new server certificates only if requested.
server_conf_dir=/var/lib/rancher/conf
if [[ -n "${OPT_REGEN_SERVER_CERT}" ]]; then
    ${ssh} ${ssh_opts} ${ssh_target} "\
           sudo ros tls gen --server --dir ${server_conf_dir} -H localhost -H $IP_ADDR \
        && sudo cp -f ${server_conf_dir}/server-cert.pem ${server_conf_dir}/server.pem \
        && sudo rm ${server_conf_dir}/server-cert.pem \
        && sudo system-docker restart docker"
fi

# server_conf_dir=/etc/docker/tls
# if [[ -n "${OPT_REGEN_SERVER_CERT}" ]]; then
#     ${ssh} ${ssh_opts} ${ssh_target} "sudo ros config set rancher.docker.tls true \
#         && sudo ros tls gen --server --dir ${server_conf_dir} -H localhost -H $IP_ADDR \
#         && sudo system-docker restart docker"
# fi

# Download the server certificates.
# The filenames are server.pem and server-key.pem.
${ssh} ${ssh_opts} ${ssh_target} "sudo cat ${server_conf_dir}/server.pem" >${machine_path}\\server.pem
# ${ssh} ${ssh_target} "sudo cat ${server_conf_dir}/server-cert.pem" >${machine_path}\\server.pem

# Generate new client certificates.
# Delete ca-key.pem.
${ssh} ${ssh_opts} ${ssh_target} "sudo ros tls gen -d $client && sudo rm $client/ca-key.pem && sudo chown -R $SSH_USER.$SSH_USER $client"

# Download CA cert and client certificates.
# ca.pem, cert.pem, key.pem
# Note: the ca.pem is read-only on Windows, so delete it first.
rm -f $(join_path ${machine_path} ca.pem)
${scp} ${ssh_opts} "${ssh_target}:$client/*.pem" $(join_path ${machine_path} "")

# Use jq in the image to modify the cert paths.
# sed becuase backslashes must be double-escaped:
# - once for shell
# - once for json
machine_update_keys_json=$(cat <<-EOF | sed -e 's%\\%\\\\%g'
{
    "Driver": {
        "IPAddress": "${IP_ADDR}",
        "MachineName": "${MACHINE_NAME}",
        "SSHUser": "$SSH_USER",
        "SSHKeyPath": "$(join_path ${machine_path} id_rsa)",
        "StorePath": "${STORE_PATH}",
        "SwarmMaster": ${IS_MASTER},
        "URL": "tcp://${IP_ADDR}:2376"
    },
    "HostOptions": {
        "SwarmOptions": {
            "IsSwarm": ${IS_SWARM},
            "Master": ${IS_MASTER}
        },
        "AuthOptions": {
            "CertDir": "$(join_path ${STORE_PATH} certs)",
            "CaCertPath": "$(join_path ${machine_path} ca.pem)",
            "CaPrivateKeyPath": "",
            "CaCertRemotePath": "",
            "ServerCertPath": "$(join_path ${machine_path} server.pem)",
            "ServerKeyPath": "",
            "ClientKeyPath": "$(join_path ${machine_path} key.pem)",
            "ServerCertRemotePath": "",
            "ServerKeyRemotePath": "",
            "ClientCertPath": "$(join_path ${machine_path} cert.pem)",
            "ServerCertSANs": [],
            "StorePath": "${machine_path}"
        }
    }
}
EOF
);

# Backup original config if it exists.
if [[ -f $(join_path ${machine_path} config.json) ]]; then
    cp -f $(join_path ${machine_path} config.json) $(join_path ${machine_path} config.json.bak)
    echo "Backed up config.json to config.json.bak."
fi

echo "$machine_template_json" | ${ssh} ${ssh_opts} ${ssh_target} "
    cat - | jq '. * $machine_update_keys_json'
" > $(join_path ${machine_path} config.json)

echo "Machine config.json updated."
